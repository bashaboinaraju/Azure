---
- name: Fetch Pending ServiceNow Requests
  hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com"
    servicenow_username: "admin"
    servicenow_password: "%ml4Vs9RXE/s"
    tenant_id: "195e8969-c853-47b4-83d0-36e044d83923"
    client_id: "e2e46ae3-2dee-4eed-a074-ddffd760ab2b"
    client_secret: "PQZ8Q~XSmMsU4dbgk2KyWMHK1h8X7ciD~H.1_csi"
    graph_api_endpoint: "https://graph.microsoft.com/v1.0"
    domain: "amitomar63gmail.onmicrosoft.com"
    start_number: 0  # Changed to 0 to check base name first
    max_number: 25
    max_username_attempts: 25  # Maximum number of username attempts to check
  tasks:
    - name: Set Payload Variables
      set_fact:
        default_user_name: "{{ awx_webhook_payload.displayName | default('') }}"
        default_mail_nickname: "{{ awx_webhook_payload.displayName.split(' ')[1:] | join(' ') | default('') }}"
        default_group_name: "{{ awx_webhook_payload.groupName | default('') }}"
        default_role_name: "{{ awx_webhook_payload.roleName | default('') }}"
 
    - name: Debug Initial Payload
      debug:
        msg:
          - "Display Name: {{ default_user_name }}"
          - "Mail Nickname: {{ default_mail_nickname }}"
          - "Group Name: {{ default_group_name }}"
          - "Role Name: {{ default_role_name }}"
 
    - name: Parse Display Name into First and Last Name
      set_fact:
        first_name: "{{ default_user_name.split(' ')[0] }}"
        last_name: "{{ default_user_name.split(' ')[1:] | join(' ') }}"
      when: default_user_name is defined and ' ' in default_user_name
    - name: Set User Principal Name Format
      set_fact:
        default_mail_nickname: "{{ first_name }}.{{ last_name }}"
 
    - name: Get Azure access token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: azure_auth_response
 
    - name: Set Azure token
      set_fact:
        access_token: "{{ azure_auth_response.json.access_token }}"
        found_available_username: false
        final_mail_nickname: ""

    - name: Find first available username and create user
      shell: |
        #!/bin/bash
        # Script to find first available username and create Azure AD user
        # Variables
        ACCESS_TOKEN="{{ access_token }}"
        BASE_NAME="{{ default_mail_nickname }}"
        DOMAIN="{{ domain }}"
        DISPLAY_NAME="{{ default_user_name }}"
        START_NUM={{ start_number }}
        MAX_NUM={{ max_number }}
        GRAPH_API="{{ graph_api_endpoint }}"
        
        # Function to check if username exists
        check_username() {
          local suffix="$1"
          local nickname
          
          # If suffix is 0, use base name with no number
          if [ "$suffix" -eq "0" ]; then
            nickname="${BASE_NAME}"
          else
            nickname="${BASE_NAME}${suffix}"
          fi
          
          local username="${nickname}@${DOMAIN}"
          
          # Make API call to check if user exists
          status_code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "${GRAPH_API}/users/${username}")
          
          echo "Checking ${username} - Status: ${status_code}"
          
          # Return true (0) if username is available (404), false (1) otherwise
          if [ "$status_code" == "404" ]; then
            return 0
          else
            return 1
          fi
        }
        
        # Function to create user
        create_user() {
          local suffix="$1"
          local nickname
          
          # If suffix is 0, use base name with no number
          if [ "$suffix" -eq "0" ]; then
            nickname="${BASE_NAME}"
          else
            nickname="${BASE_NAME}${suffix}"
          fi
          
          local username="${nickname}@${DOMAIN}"
          
          # Create JSON payload
          json_payload=$(cat <<EOF
        {
          "accountEnabled": true,
          "displayName": "${DISPLAY_NAME}",
          "mailNickname": "${nickname}",
          "givenName": "{{ first_name | default(default_user_name) }}",
          "surname": "{{ last_name | default('') }}",
          "userPrincipalName": "${username}",
          "passwordProfile": {
            "forceChangePasswordNextSignIn": true,
            "password": "Default@1234"
          }
        }
        EOF
        )
          # Make API call to create user
          response=$(curl -s \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$json_payload" \
            -X POST \
            "${GRAPH_API}/users")
          
          # Extract user ID and save both username and ID
          user_id=$(echo "$response" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)
          echo "User creation response: $response"
          echo "AVAILABLE_USERNAME=${username}" > /tmp/username_result.txt
          echo "USER_ID=${user_id}" >> /tmp/username_result.txt
          echo "MAIL_NICKNAME=${nickname}" >> /tmp/username_result.txt
        }
        
        # First try with base name (no suffix)
        if check_username 0; then
          echo "Found available username: ${BASE_NAME}@${DOMAIN} (no suffix needed)"
          create_user 0
          exit 0
        fi
        
        # If base name is taken, try with numeric suffixes
        for ((i=1; i<=${MAX_NUM}; i++)); do
          if check_username $i; then
            echo "Found available username: ${BASE_NAME}${i}@${DOMAIN}"
            create_user $i
            exit 0
          fi
        done
        
        echo "No available username found after checking base name and ${MAX_NUM} numeric options"
        exit 1
      args:
        executable: /bin/bash
      register: username_search_result
      
    - name: Debug script result
      debug:
        msg: "{{ username_search_result.stdout_lines }}"

    - name: Read username result file
      slurp:
        src: /tmp/username_result.txt
      register: username_file_content_base64
      when: username_search_result.rc == 0
      
    - name: Decode base64 content
      set_fact:
        username_file_content: "{{ username_file_content_base64.content | b64decode }}"
      when: username_file_content_base64 is defined and username_file_content_base64.content is defined

    - name: Extract user information
      set_fact:
        final_username: "{{ username_file_content | regex_search('AVAILABLE_USERNAME=(.*)\\n', '\\1') | first }}"
        user_id: "{{ username_file_content | regex_search('USER_ID=(.*)\\n', '\\1') | first }}"
        final_mail_nickname: "{{ username_file_content | regex_search('MAIL_NICKNAME=(.*)$', '\\1') | first }}"
      when: username_file_content is defined
      
    - name: Debug extracted user info
      debug:
        msg:
          - "Final Username: {{ final_username | default('Not extracted') }}"
          - "User ID: {{ user_id | default('Not extracted') }}"
          - "Mail Nickname: {{ final_mail_nickname | default('Not extracted') }}"
      when: username_search_result.rc == 0
 
    - name: Group Assignment Block
      block:
        - name: Encode Group Name for URL
          set_fact:
            encoded_group_name: "{{ default_group_name | urlencode }}"
          when: default_group_name is defined and default_group_name != ''
 
        - name: Get Group ID by Name
          uri:
            url: "{{ graph_api_endpoint }}/groups?$filter=displayName%20eq%20'{{ encoded_group_name }}'"
            method: GET
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            return_content: yes
          register: group_lookup
          when: default_group_name is defined and default_group_name != ''
 
        - name: Add User to Group
          uri:
            url: "{{ graph_api_endpoint }}/groups/{{ group_lookup.json.value[0].id }}/members/$ref"
            method: POST
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            body:
              "@odata.id": "{{ graph_api_endpoint }}/directoryObjects/{{ user_id }}"
            body_format: json
            status_code: [204]
          when: 
            - user_id is defined
            - group_lookup is defined
            - group_lookup.json is defined
            - group_lookup.json.value | length > 0
          register: group_add_result
 
        - name: Debug Group Add Result
          debug:
            msg: 
              - "Group Add Result: {{ group_add_result }}"
              - "Group Assignment Status: {{ 'Successful' if group_add_result.status | default(0) == 204 else 'Skipped or Failed' }}"
      when: default_group_name is defined and default_group_name != '' and user_id is defined
 
    - name: Role Assignment Block
      block:
        - name: Get Directory Role Templates
          uri:
            url: "{{ graph_api_endpoint }}/directoryRoleTemplates"
            method: GET
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            return_content: yes
          register: role_templates
          when: default_role_name is defined and default_role_name != ''
 
        - name: Get Available Directory Roles
          uri:
            url: "{{ graph_api_endpoint }}/directoryRoles"
            method: GET
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            return_content: yes
          register: available_roles
          when: 
            - default_role_name is defined
            - default_role_name != ''
 
        - name: Assign Role to User
          uri:
            url: "{{ graph_api_endpoint }}/directoryRoles/{{ active_role.id }}/members/$ref"
            method: POST
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            body:
              "@odata.id": "{{ graph_api_endpoint }}/directoryObjects/{{ user_id }}"
            body_format: json
            status_code: [204]
          loop: "{{ available_roles.json.value | selectattr('displayName', 'equalto', default_role_name) | list }}"
          loop_control:
            loop_var: active_role
          when: 
            - user_id is defined
            - default_role_name is defined
            - default_role_name != ''
            - available_roles.json.value is defined
          register: role_assign_result
 
        - name: Debug Role Assignment
          debug:
            msg: 
              - "Role Assignment Result: {{ role_assign_result }}"
              - "Role Assignment Status: {{ 'Successful' if role_assign_result.changed else 'Skipped or Failed' }}"
      when: default_role_name is defined and default_role_name != '' and user_id is defined
 
    - name: Final Debug Information
      debug:
        msg:
          - "First Name: {{ first_name | default('Not Set') }}"
          - "Last Name: {{ last_name | default('Not Set') }}"
          - "Group: {{ default_group_name | default('No Group Specified') }}"
          - "Role: {{ default_role_name | default('No Role Specified') }}"
          - "Final Username: {{ final_username | default('User not created') }}"
