---
- name: Fetch Pending ServiceNow Requests
  hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com"
    servicenow_username: "admin"
    servicenow_password: "%ml4Vs9RXE/s"
    tenant_id: "195e8969-c853-47b4-83d0-36e044d83923"
    client_id: "e2e46ae3-2dee-4eed-a074-ddffd760ab2b"
    client_secret: "PQZ8Q~XSmMsU4dbgk2KyWMHK1h8X7ciD~H.1_csi"
    graph_api_endpoint: "https://graph.microsoft.com/v1.0"
    domain: "amitomar63gmail.onmicrosoft.com"
    max_username_attempts: 100  # Maximum number of username attempts to check
  tasks:
    - name: Set Payload Variables
      set_fact:
        default_user_name: "{{ awx_webhook_payload.displayName | default('') }}"
        default_mail_nickname: "{{ awx_webhook_payload.displayName.split(' ')[1:] | join(' ') | default('') }}"
        default_group_name: "{{ awx_webhook_payload.groupName | default('') }}"
        default_role_name: "{{ awx_webhook_payload.roleName | default('') }}"
 
    - name: Debug Initial Payload
      debug:
        msg:
          - "Display Name: {{ default_user_name }}"
          - "Mail Nickname: {{ default_mail_nickname }}"
          - "Group Name: {{ default_group_name }}"
          - "Role Name: {{ default_role_name }}"
 
    - name: Parse Display Name into First and Last Name
      set_fact:
        first_name: "{{ default_user_name.split(' ')[0] }}"
        last_name: "{{ default_user_name.split(' ')[1:] | join(' ') }}"
      when: default_user_name is defined and ' ' in default_user_name
 
    - name: Get Azure access token
      uri:
        url: "https://login.microsoftonline.com/{{ tenant_id }}/oauth2/v2.0/token"
        method: POST
        body:
          client_id: "{{ client_id }}"
          client_secret: "{{ client_secret }}"
          scope: "https://graph.microsoft.com/.default"
          grant_type: "client_credentials"
        body_format: form-urlencoded
        return_content: yes
      register: azure_auth_response
 
    - name: Set Azure token
      set_fact:
        access_token: "{{ azure_auth_response.json.access_token }}"
        found_available_username: false
        final_mail_nickname: ""

    # Improved username search with shell script approach
    - name: Find available username
      shell: |
        #!/bin/bash
        
        # Parameters
        ACCESS_TOKEN="{{ access_token }}"
        BASE_NAME="{{ default_mail_nickname }}"
        DOMAIN="{{ domain }}"
        GRAPH_API="{{ graph_api_endpoint }}"
        MAX_ATTEMPTS="{{ max_username_attempts }}"
        
        # First check the base username without any number
        echo "Checking base username: ${BASE_NAME}@${DOMAIN}"
        BASE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          "${GRAPH_API}/users/${BASE_NAME}@${DOMAIN}")
        
        if [ "$BASE_STATUS" == "404" ]; then
          echo "Base username available: ${BASE_NAME}"
          echo "${BASE_NAME}"
          exit 0
        fi
        
        # Search for available username with incremental suffix
        for i in $(seq 1 $MAX_ATTEMPTS); do
          USERNAME="${BASE_NAME}${i}"
          echo "Checking username: ${USERNAME}@${DOMAIN}"
          
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            "${GRAPH_API}/users/${USERNAME}@${DOMAIN}")
          
          if [ "$STATUS" == "404" ]; then
            echo "Found available username: ${USERNAME}"
            echo "${USERNAME}"
            exit 0
          fi
        done
        
        # If we reach here, no username was found
        echo "ERROR: No available username found after ${MAX_ATTEMPTS} attempts"
        exit 1
      args:
        executable: /bin/bash
      register: username_search_result
      failed_when: username_search_result.rc != 0
    
    - name: Set final mail nickname from search result
      set_fact:
        final_mail_nickname: "{{ username_search_result.stdout_lines[-1] }}"
      when: username_search_result.rc == 0
    
    - name: Debug final username
      debug:
        msg: "Final username will be: {{ final_mail_nickname }}@{{ domain }}"

    - name: Create User in Azure AD
      uri:
        url: "{{ graph_api_endpoint }}/users"
        method: POST
        headers:
          Authorization: "Bearer {{ access_token }}"
          Content-Type: "application/json"
        body:
          accountEnabled: true
          displayName: "{{ default_user_name }}"
          givenName: "{{ first_name | default(default_user_name) }}"
          surname: "{{ last_name | default('') }}"
          mailNickname: "{{ final_mail_nickname }}"
          userPrincipalName: "{{ final_mail_nickname }}@{{ domain }}"
          passwordProfile:
            forceChangePasswordNextSignIn: true
            password: "Default@1234"
        body_format: json
        status_code: [201, 200]
      register: user_creation
      failed_when: false
 
    - name: Detailed User Creation Debug
      block:
        - name: Debug User Creation Errors
          debug:
            msg: 
              - "User Creation Status: {{ user_creation.status }}"
              - "Response Body: {{ user_creation.json | default('No JSON response') }}"
              - "Error Details: {{ user_creation.json.error.message | default('Unknown error') }}"
          when: user_creation.status is defined and user_creation.status != 201
 
        - name: Fail Playbook if User Creation Critically Fails
          fail:
            msg: "User creation failed with status {{ user_creation.status }}: {{ user_creation.json.error.message | default('Unknown error') }}"
          when: user_creation.status is defined and user_creation.status not in [200, 201]
      when: user_creation.status is defined and user_creation.status not in [200, 201]
 
    - name: Group Assignment Block
      block:
        - name: Encode Group Name for URL
          set_fact:
            encoded_group_name: "{{ default_group_name | urlencode }}"
          when: default_group_name is defined and default_group_name != ''
 
        - name: Get Group ID by Name
          uri:
            url: "{{ graph_api_endpoint }}/groups?$filter=displayName%20eq%20'{{ encoded_group_name }}'"
            method: GET
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            return_content: yes
          register: group_lookup
          when: default_group_name is defined and default_group_name != ''
 
        - name: Add User to Group
          uri:
            url: "{{ graph_api_endpoint }}/groups/{{ group_lookup.json.value[0].id }}/members/$ref"
            method: POST
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            body:
              "@odata.id": "{{ graph_api_endpoint }}/directoryObjects/{{ user_creation.json.id }}"
            body_format: json
            status_code: [204]
          when: 
            - user_creation.json is defined
            - user_creation.json.id is defined
            - group_lookup is defined
            - group_lookup.json is defined
            - group_lookup.json.value | length > 0
          register: group_add_result
 
        - name: Debug Group Add Result
          debug:
            msg: 
              - "Group Add Result: {{ group_add_result }}"
              - "Group Assignment Status: {{ 'Successful' if group_add_result.status == 204 else 'Skipped or Failed' }}"
      when: default_group_name is defined and default_group_name != ''
 
    - name: Role Assignment Block
      block:
        - name: Get Directory Role Templates
          uri:
            url: "{{ graph_api_endpoint }}/directoryRoleTemplates"
            method: GET
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            return_content: yes
          register: role_templates
          when: default_role_name is defined and default_role_name != ''
 
        - name: Get Available Directory Roles
          uri:
            url: "{{ graph_api_endpoint }}/directoryRoles"
            method: GET
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            return_content: yes
          register: available_roles
          when: 
            - default_role_name is defined
            - default_role_name != ''
 
        - name: Assign Role to User
          uri:
            url: "{{ graph_api_endpoint }}/directoryRoles/{{ active_role.id }}/members/$ref"
            method: POST
            headers:
              Authorization: "Bearer {{ access_token }}"
              Content-Type: "application/json"
            body:
              "@odata.id": "{{ graph_api_endpoint }}/directoryObjects/{{ user_creation.json.id }}"
            body_format: json
            status_code: [204]
          loop: "{{ available_roles.json.value | selectattr('displayName', 'equalto', default_role_name) | list }}"
          loop_control:
            loop_var: active_role
          when: 
            - user_creation.json is defined
            - user_creation.json.id is defined
            - default_role_name is defined
            - default_role_name != ''
            - available_roles.json.value is defined
          register: role_assign_result
 
        - name: Debug Role Assignment
          debug:
            msg: 
              - "Role Assignment Result: {{ role_assign_result }}"
              - "Role Assignment Status: {{ 'Successful' if role_assign_result.changed else 'Skipped or Failed' }}"
      when: default_role_name is defined and default_role_name != ''
 
    - name: Final Debug Information
      debug:
        msg:
          - "First Name: {{ first_name | default('Not Set') }}"
          - "Last Name: {{ last_name | default('Not Set') }}"
          - "Group: {{ default_group_name | default('No Group Specified') }}"
          - "Role: {{ default_role_name | default('No Role Specified') }}"
          - "Final Username: {{ final_mail_nickname }}@{{ domain }}"
